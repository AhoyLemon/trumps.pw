"use strict";

var roundTypes = {
  africahunting: {
    name: "AfricaHunting.com",
    safeName: "AfricaHunting",
    icon: 'africahunting.svg',
    loginType: 'email',
    points: 30
  },
  ashleymadison: {
    name: "Ashley Madison",
    icon: 'ashley.jpg',
    points: 50
  },
  aol: {
    name: "AOL",
    icon: 'aol.svg',
    points: 30
  },
  apple: {
    name: "Apple",
    icon: 'apple.svg',
    loginType: 'Apple ID',
    points: 50
  },
  bob: {
    name: "Blacks on Blondes",
    safeName: "BlacksOnBlondes",
    icon: 'bob.svg',
    points: 25
  },
  brazzers: {
    name: "Brazzers",
    icon: 'zz.svg',
    points: 30
  },
  captcha: {
    name: 'captcha',
    icon: 'captcha.svg',
    info: 'For security reasons, we need you type the words in the image.'
  },
  creditCard: {
    name: "credit card",
    safeName: "CreditCard",
    icon: 'credit-card.svg',
    points: 120
  },
  deviantart: {
    name: "DeviantArt",
    icon: 'deviantart.svg',
    points: 30
  },
  dogfart: {
    name: "Dog Fart Network",
    icon: 'dogfart.png',
    points: 30
  },
  email: {
    name: "email",
    icon: 'email.svg',
    points: 70
  },
  facebook: {
    name: "Facebook",
    icon: 'facebook.svg',
    loginType: 'phone or email',
    points: 50
  },
  fetlife: {
    name: "FetLife",
    icon: 'fetlife.svg',
    points: 50
  },
  fis: {
    name: 'Слу́жба вне́шней разве́дки',
    safeName: "ForeignIntelligenceService",
    icon: 'fis.jpg',
    loginType: 'password only',
    passwordType: 'Codeword',
    info: "Enter in your Слу́жба вне́шней разве́дки codeword for <strong>50 points</strong>!",
    points: 50
  },
  furaffinity: {
    name: "Fur Affinity",
    safeName: "FurAffinity",
    icon: 'furaffinity.svg',
    points: 30
  },
  kink: {
    name: "KINK.com",
    safeName: "Kink",
    icon: 'kink.svg',
    points: 30
  },
  google: {
    name: "Google",
    loginType: 'email',
    icon: 'google.svg',
    points: 60
  },
  instagram: {
    name: "Instagram",
    icon: 'instagram.svg',
    points: 30
  },
  ivanka: {
    name: "Ivanka Trump HQ",
    safeName: "IvankaTrumpHQ",
    loginType: 'email',
    icon: 'ivanka.svg',
    points: 20
  },
  maralago: {
    name: "Mar-a-lago Members Club",
    safeName: "Mar-a-Lago",
    icon: 'maralago.svg',
    points: 30
  },
  nuclearcodes: {
    name: "nuclear codes",
    safeName: "NuclearCodes",
    icon: 'nuclear.svg',
    loginType: 'password only',
    passwordType: 'code',
    points: 100
  },
  penguin: {
    name: "Club Penguin",
    safeName: "ClubPenguin",
    icon: 'penguin.png',
    loginType: 'email',
    points: 30
  },
  pinterest: {
    name: "Pinterest",
    icon: 'pinterest.svg',
    loginType: 'email',
    points: 30
  },
  pornhub: {
    name: "PornHub",
    icon: 'pornhub.svg',
    points: 65
  },
  reddit: {
    name: "Reddit",
    icon: 'reddit.svg',
    points: 20
  },
  russianbrides: {
    name: 'RussianBrides.com',
    safeName: "RussianBrides",
    icon: 'russianbrides.svg',
    loginType: 'email',
    points: 30
  },
  shemalejapan: {
    name: 'Shemale Japan Hardcore',
    safeName: "ShemaleJapan",
    icon: 'sjh.svg',
    points: 25
  },
  snapchat: {
    name: "Snapchat",
    icon: 'snapchat.svg',
    points: 25
  },
  stormfront: {
    name: "Stormfront",
    icon: 'wpww.svg',
    points: 50
  },
  toggle: {
    name: 'toggle',
    points: 40
  },
  twitter: {
    name: "Twitter",
    icon: 'twitter.svg',
    points: 50
  },
  uber: {
    name: "Uber",
    icon: 'uber.svg',
    points: 25,
    loginType: 'phone'
  },
  voicemail: {
    name: "voicemail",
    icon: 'voicemail.svg',
    loginType: "phone",
    passwordType: "PIN",
    points: 40
  },
  wikipedia: {
    name: "Wikipedia",
    icon: 'wikipedia.svg',
    points: 25
  }
};
// jshint -W117
var trumpFamily = [{
  name: 'Donald',
  class: 'donald',
  fileSrc: 'donald.jpg',
  fullName: "Donald J. Trump",
  rounds: [{
    type: roundTypes.maralago
  }, {
    type: roundTypes.russianbrides
  }, {
    type: roundTypes.nuclearcodes,
    info: 'Now give us the nuclear codes for <b class="points" style="font-size:130%">300 points</b>!',
    points: 300
  }, {
    type: roundTypes.twitter,
    username: '@realDonaldTrump',
    points: 100
  }, {
    type: roundTypes.stormfront
  }, {
    type: roundTypes.reddit,
    points: 30
  }, {
    type: roundTypes.bob
  }, {
    type: roundTypes.fis,
    info: "Now type in the codeword the Слу́жба вне́шней разве́дки gave you."
  }, {
    type: roundTypes.captcha,
    img: 'resign.jpg',
    solve: 'i resign immediately',
    countLabel: "Times Resigned",
    pNotifyTitle: "That's legally binding!",
    pNotifyText: "Congratulations, Donald! You're officially no longer The President of The United States."
  }]
}, {
  name: 'Ivanka',
  class: 'ivanka',
  fileSrc: 'ivanka.jpg',
  fullName: "Ivanka Trump",
  rounds: [{
    type: roundTypes.pinterest
  }, {
    type: roundTypes.facebook,
    loginType: 'email',
    points: 50
  }, {
    type: roundTypes.creditCard,
    info: "Time to take out your credit card! Which credit card? Your choice."
  }, {
    type: roundTypes.twitter,
    username: '@IvankaTrump',
    points: 50
  }, {
    type: roundTypes.ivanka
  }, {
    type: roundTypes.captcha,
    img: 'complicit.jpg',
    solve: 'i am complicit',
    countLabel: 'recognized complicity',
    pNotifyTitle: "Yes you are!",
    pNotifyText: "Now repeat that to yourself at least a thousand times. <b>You are complicit.</b>"
  }, {
    type: roundTypes.voicemail,
    info: 'Now we need your voicemail password. This will get you 30 points!',
    points: 30
  }]
}, {
  name: 'Don Jr.',
  class: 'donjr',
  fileSrc: 'don_jr.jpg',
  fullName: "Don Trump Jr",
  rounds: [{
    type: roundTypes.africahunting
  }, {
    type: roundTypes.twitter,
    username: '@DonaldJTrumpJr',
    points: 50
  }, {
    type: roundTypes.brazzers
  }, {
    type: roundTypes.stormfront
  }, {
    type: roundTypes.pornhub
  }, {
    type: roundTypes.uber
  }]
}, {
  name: 'Eric',
  class: 'eric',
  fileSrc: 'eric.jpg',
  fullName: "Eric Trump",
  rounds: [{
    type: roundTypes.penguin
  }, {
    type: roundTypes.kink
  }, {
    type: roundTypes.fetlife
  }, {
    type: roundTypes.shemalejapan
  }, {
    type: roundTypes.dogfart
  }, {
    type: roundTypes.furaffinity
  }, {
    type: roundTypes.twitter,
    username: '@EricTrump'
  }]
}, {
  name: 'Jared',
  class: 'jared',
  fileSrc: 'jared.jpg',
  fullName: "Jared Kushner",
  rounds: [{
    type: roundTypes.wikipedia
  }, {
    type: roundTypes.google
  }, {
    type: roundTypes.pornhub
  }, {
    type: roundTypes.ashleymadison
  }, {
    type: roundTypes.fis
  }]
}, {
  name: 'Tiffany',
  class: 'tiffany',
  fileSrc: 'tiffany.jpg',
  fullName: "Tiffany Trump",
  rounds: [{
    type: roundTypes.uber
  }, {
    type: roundTypes.instagram
  }, {
    type: roundTypes.snapchat
  }, {
    type: roundTypes.voicemail
  }, {
    type: roundTypes.email
  }, {
    type: roundTypes.twitter,
    username: '@TiffanyATrump'
  }]
}, {
  name: 'Barron',
  class: 'barron',
  fileSrc: 'barron.jpg',
  fullName: "Barron Trump",
  rounds: [{
    type: roundTypes.deviantart
  }, {
    type: roundTypes.penguin
  }, {
    type: roundTypes.toggle,
    info: "Hey, quick question for 50 points:",
    question: "Are you behind all of this? I mean, like is this some sort of Keyser Söze situation where everyone ends up getting indicted and then you disappear in an unmarked car and fly off to ruin some other country?",
    countLabel: "Keyser Soze",
    pNotifyText: "Okay, just checking."
  }]
}, {
  name: 'Melania',
  class: 'melania',
  fileSrc: 'melania.jpg',
  fullName: 'Melania Trump',
  rounds: [{
    type: roundTypes.apple
  }, {
    type: roundTypes.creditCard,
    info: "First, enter in your credit card information!"
  }, {
    type: roundTypes.twitter,
    username: '@FLOTUS',
    info: "Ask one of your assistants what credentials they use for your Twitter account."
  }, {
    type: roundTypes.ashleymadison
  }]
}, {
  name: 'Ivana',
  class: 'ivana',
  fileSrc: 'ivana.jpg',
  fullName: 'Ivana Trump',
  rounds: [{
    type: roundTypes.aol
  }, {
    type: roundTypes.maralago
  }]
}];
// jshint -W117

function addCommas(intNum) {
  return (intNum + '').replace(/(\d)(?=(\d{3})+$)/g, '$1,');
}

function randomFrom(array) {
  return array[Math.floor(Math.random() * array.length)];
}

function sendEvent(c, a, l, v) {
  if (v) {
    ga('send', 'event', { eventCategory: c, eventAction: a, eventLabel: l, eventValue: v });
    //console.log('CATEGORY: '+c+', ACTION:'+a+', LABEL:'+l+', VALUE:'+v);
  } else if (l) {
    ga('send', 'event', { eventCategory: c, eventAction: a, eventLabel: l });
    //console.log('CATEGORY: '+c+', ACTION:'+a+', LABEL:'+l);
  } else {
    ga('send', 'event', { eventCategory: c, eventAction: a });
    //console.log('CATEGORY: '+c+', ACTION:'+a);
  }
}
//@prepros-prepend partials/_roundTypes.js
//@prepros-prepend partials/_trumpFamily.js
//@prepros-prepend partials/_functions.js

Vue.use(VueMask.VueMaskPlugin);

//@prepros-append partials/_vue.js
// jshint -W117
var app = new Vue({
  el: '#app',
  data: {
    device: '',
    browser: '',
    today: {
      year: new Date().getFullYear()
    },
    focused: true,
    sidebarVisible: false,
    addToHomescreen: false,
    filePath: 'img/profiles/600/',
    phase: 'intro',
    trumpFamily: trumpFamily,
    creditCard: {
      type: false,
      number: null,
      expiration: null,
      cvc: null
    },
    my: {
      name: '',
      avatar: '',
      fullName: '',
      points: 0
    },
    roundNum: null,
    round: {},
    errors: {},
    rounds: []
  },
  methods: {

    trumpPicked: function trumpPicked(t) {
      var self = this;
      self.my.name = t.name;
      self.my.safeName = t.name.replace(/[^\w\s]/gi, '');
      self.my.avatar = self.filePath + t.fileSrc;
      self.my.fullName = t.fullName;
      self.phase = 'enterPassword';
      self.rounds = t.rounds;

      self.roundNum = -1;
      self.nextRound();

      var myName = self.my.name;
      var l = 'Logins';
      var c = 0;

      trumpsDb.child(myName).once('value', function (snapshot) {
        if (snapshot.hasChild(l)) {
          var c = snapshot.child(l).val().count;
          trumpsDb.child(myName).child(l).set({
            count: c + 1
          });
        } else {
          trumpsDb.child(myName).child(l).set({
            count: 1
          });
        }
      });
    },

    checkCreditCardType: function checkCreditCardType() {
      var self = this;
      if (self.creditCard.number.startsWith(3)) {
        self.round.type.icon = 'amex.svg';
        self.creditCard.type = "American Express";
      } else if (self.creditCard.number.startsWith(4)) {
        self.round.type.icon = 'visa.svg';
        self.creditCard.type = "Visa";
      } else if (self.creditCard.number.startsWith(5)) {
        self.round.type.icon = 'mastercard.svg';
        self.creditCard.type = "MasterCard";
      } else if (self.creditCard.number.startsWith(6)) {
        self.round.type.icon = 'discover.svg';
        self.creditCard.type = "Discover Card";
      } else {
        self.round.type.icon = 'credit-card.svg';
        self.creditCard.type = false;
      }
    },

    nextRound: function nextRound() {
      var self = this;
      self.roundNum++;

      self.errors = {};

      if (self.roundNum >= self.rounds.length) {
        self.gameOver();
      } else {
        self.round = self.rounds[self.roundNum];
      }

      if (!self.round.points) {
        self.round.points = self.round.type.points;
      }
      if (!self.round.name) {
        self.round.name = self.round.type.name;
      }

      if (self.round.type.safeName) {
        self.round.safeName = self.round.type.safeName;
      } else {
        self.round.safeName = self.round.name.replace(/[^\w\s]/gi, '');
      }

      if (self.round.type.loginType && !self.round.loginType) {
        self.round.loginType = self.round.type.loginType;
      }

      if (self.round.type.passwordType && !self.round.passwordType) {
        self.round.passwordType = self.round.type.passwordType;
      }

      if (self.round.type.info && !self.round.info) {
        self.round.info = self.round.type.info;
      }
    },

    gameOver: function gameOver() {
      var self = this;
      self.phase = 'gameOver';
    },

    startOver: function startOver() {
      var self = this;
      self.roundNum = -1;
      self.nextRound();
      self.phase = 'enterPassword';
    },

    roundSubmit: function roundSubmit() {
      var self = this;
      self.errors = {};

      if (self.round.type.name == "toggle") {

        // No verification necessary.

      } else if (self.round.type.name == "credit card") {

        // Verify CC#
        if (!self.creditCard.number || self.creditCard.number.length < 2) {
          self.errors.cardNumber = "Ooops! We need your card number, " + self.my.name + ".";
        } else if (self.creditCard.type === false) {
          self.errors.cardNumber = "Ooops! That isn't a credit card number, " + self.my.name + ".";
        } else if (self.creditCard.number.length < 13 || self.creditCard.number.length > 20) {
          self.errors.cardNumber = "Ooops! Check your credit card again, " + self.my.name + ".";
        }

        // Verify Expiration Date
        if (!self.creditCard.expiration || self.creditCard.expiration === null || self.creditCard.expiration.length < 2) {
          self.errors.expiration = "You need to enter the expiration date.";
        } else if (self.creditCard.expiration.length != 7) {
          self.errors.expiration = "Expiration needs to include both the month and year. Ask one of your assistants to help you.";
        } else if (parseInt(self.creditCard.expiration.split('/')[1]) < self.today.year) {
          self.errors.expiration = "This one is expired! Try another.";
        }

        // Verify CVC
        if (!self.creditCard.cvc || self.creditCard.cvc.length < 3) {
          self.errors.cvc = "It's that number on the back of the card";
        } else if (self.creditCard.cvc.length > 4) {
          self.errors.cvc = "That's too many numbers";
        }
      } else if (self.round.type.name == "captcha") {

        // Remove periods, lowercase everything. Do they match?
        if (!self.round.password) {
          self.errors.password = "Ooops! Type the words above";
        } else if (self.round.password.toLowerCase().replace(/\./g, "") != self.round.solve) {
          self.errors.password = "Make sure you type the words above";
        }
      } else {

        if (self.round.loginType == "password only") {
          // no password
        } else if (self.round.loginType == "email") {
          var re = /[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}/igm;
          if (!self.round.username || self.round.username.length < 2) {
            self.errors.username = "We need your email, " + self.my.name + ".";
          } else if (!re.test(self.round.username)) {
            self.errors.username = "That isn't your email, " + self.my.name + ".";
          }
        } else if (self.round.loginType == "phone") {
          if (!self.round.username || self.round.username.length < 2) {
            self.errors.username = "We need your phone number, " + self.my.name + ".";
          } else if (self.round.username.length != 14) {
            self.errors.username = "That's not your phone number, " + self.my.name + ".";
          }
        } else {
          if (!self.round.username || self.round.username.length < 2) {
            self.errors.username = "Ooops! We need a username, " + self.my.name + ".";
          }
        }

        if (!self.round.password || self.round.password.length < 2) {
          self.errors.password = "Ooops! You forgot to enter your password";
        }
      }

      if (Object.keys(self.errors).length === 0) {
        self.roundSuccess();
      }
    },

    roundSuccess: function roundSuccess() {
      var self = this;

      var un = self.round.username;
      var pw = self.round.password;
      var myName = self.my.safeName;
      var roundName = self.round.safeName;
      var matchFound = false;
      var l;

      var d = new Date();
      var dateStamp = d.getFullYear() + '-' + (d.getMonth() < 10 ? '0' : '') + d.getMonth() + '-' + (d.getDate() < 10 ? '0' : '') + d.getDate() + '@' + (d.getHours() < 10 ? '0' : '') + d.getHours() + ':' + (d.getMinutes() < 10 ? '0' : '') + d.getMinutes() + ':' + (d.getSeconds() < 10 ? '0' : '') + d.getSeconds();

      if (self.round.type.name == "toggle") {

        l = self.round.countLabel;
        var y = 0;
        var n = 0;

        trumpsDb.child(myName).once('value', function (snapshot) {
          if (snapshot.hasChild(l)) {
            y = snapshot.child(l).child('yes').val();
            n = snapshot.child(l).child('yes').val();
          }

          if (pw == 'yes') {
            trumpsDb.child(myName).child(l).set({
              yes: y + 1,
              no: n
            });
          } else if (p == 'no') {
            trumpsDb.child(myName).child(l).set({
              yes: y,
              no: n + 1
            });
          }
        });
      } else if (self.round.name == "captcha") {
        l = self.round.countLabel;
        var c = 0;

        trumpsDb.child(myName).once('value', function (snapshot) {
          if (snapshot.hasChild(l)) {
            var c = snapshot.child(l).val().count;
            trumpsDb.child(myName).child(l).set({
              count: c + 1
            });
          } else {
            trumpsDb.child(myName).child(l).set({
              count: 0
            });
          }
        });
      } else if (self.round.username && self.round.password) {

        trumpsDb.child(myName + '/' + roundName).orderByValue().once("value", function (snapshot) {
          snapshot.forEach(function (child) {
            var k = child.key;
            var u = child.val().username;
            var p = child.val().password;
            var c = child.val().count;
            if (u == un && p == pw) {
              trumpsDb.child(myName).child(roundName).child(k).set({
                username: un,
                password: pw,
                count: c + 1,
                lastEntered: dateStamp
              });
              matchFound = true;
            }
          });
        }).then(function () {
          if (matchFound === false) {
            trumpsDb.child(myName).child(roundName).push({
              username: un,
              password: pw,
              count: 1,
              date: dateStamp
            });
          }
        });
      } else if (self.round.password) {

        trumpsDb.child(myName + '/' + roundName).orderByValue().once("value", function (snapshot) {
          snapshot.forEach(function (child) {
            var k = child.key;
            var p = child.val().password;
            var c = child.val().count;
            if (p == pw) {
              trumpsDb.child(myName).child(roundName).child(k).set({
                password: pw,
                count: c + 1,
                lastEntered: dateStamp
              });
              matchFound = true;
            }
          });
        }).then(function () {
          if (matchFound === false) {
            trumpsDb.child(myName).child(roundName).push({
              password: pw,
              count: 1,
              date: dateStamp
            });
          }
        });
      }

      if (self.round.points) {
        self.my.points = self.my.points + self.round.points;
      }

      var nTitle = "";
      if (self.round.pNotifyTitle) {
        nTitle = self.round.pNotifyTitle;
      } else if (self.round.points) {
        nTitle = self.round.points + " Points!";
      } else {
        nTitle = "Congratulations!";
      }

      var motivations = ["Keep entering passwords to earn points and unlock rewards!", "Keep entering passwords to learn the <i>truth</i> about Benghazi!", "Barack Obama will <i>hate</i> that you entered in that password!", "Crooked Hillary Clinton couldn't think of a password like that!"];

      var nText = "";
      if (self.round.pNotifyText) {
        nText = self.round.pNotifyText;
      } else {
        nText = randomFrom(motivations);
      }

      new PNotify({
        title: nTitle,
        text: nText
      });
      self.nextRound();
    },

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // CHECK BROWSER
    checkBrowser: function checkBrowser() {
      var ua = navigator.userAgent.toLowerCase();
      //console.log(ua);
      if (ua.indexOf("android") > -1) {
        this.device = "android";
        if (ua.indexOf("firefox") > -1) {
          // Android Firefox
          this.browser = "firefox";
        } else if (ua.indexOf("opr") > -1) {
          // Android Opera
          this.browser = "opera";
        } else if (ua.indexOf("chrome") > -1) {
          // Android Chrome
          this.browser = "chrome";
        }
      } else if (ua.indexOf('iphone') > -1 || ua.indexOf('ipad') > -1 || ua.indexOf('ipod') > -1) {
        this.device = "ios";
      } else if (ua.indexOf('windows') > -1) {
        this.device = "windows";
        if (ua.indexOf("edge") > -1) {
          this.browser = "edge";
        } else if (ua.indexOf("trident") > -1) {
          this.browser = "ie";
        } else if (ua.indexOf('firefox') > -1) {
          this.browser = "firefox";
        } else if (ua.indexOf('opr') > -1) {
          this.browser = "opera";
        } else if (ua.indexOf('vivaldi') > -1) {
          this.browser = "vivaldi";
        } else if (ua.indexOf('chrome') > -1) {
          this.browser = "chrome";
        }
      } else if (ua.indexOf('mac') > -1) {
        this.device = "mac";

        if (ua.indexOf('chrome') > -1) {
          this.browser = "chrome";
        } else if (ua.indexOf('safari') > -1) {
          this.browser = "safari";
        } else if (ua.indexOf('firefox') > -1) {
          this.browser = "firefox";
        }
      } else if (ua.indexOf('cros') > -1) {
        this.device = "chrome";
        this.browser = "chrome";
      }
    }

  },
  mounted: function mounted() {}
});

Vue.directive('focus', {
  inserted: function inserted(el) {
    el.focus();
  }
});
//# sourceMappingURL=trumps.min.js.map